// <auto-generated />
using System;
using CramickHomework.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CramickHomework.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906224416_AddedContact")]
    partial class AddedContact
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CramickHomework.Application.Features.Contacts.Domain.Contact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("CramickHomework.Application.Features.Users.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b59b00e0-d70e-499f-bfaf-dca40561fa65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e269ab7-6437-4a53-b032-66a9ee9bf8a6",
                            CreatedById = "b59b00e0-d70e-499f-bfaf-dca40561fa65",
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 9, 7, 0, 44, 15, 897, DateTimeKind.Unspecified).AddTicks(8831), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "cramickhomework@gmail.com",
                            EmailConfirmed = true,
                            FullName = "SYSTEM",
                            LockoutEnabled = false,
                            NormalizedEmail = "CRAMICKHOMEWORK@GMAIL.COM",
                            NormalizedUserName = "F7851428.0DAE.470D.AC89.60F7C61A065B",
                            PasswordHash = "AQAAAAIAAYagAAAAEP5vtprtgSPuj/Gx4HHOfbiKSZTcNVsyzpe1mhXNJh7leca45E92jQ2YDc7Mmpg4VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0572e783-b426-442b-b394-43c847b1eb24",
                            TwoFactorEnabled = false,
                            UserName = "f7851428.0dae.470d.ac89.60f7c61a065b"
                        },
                        new
                        {
                            Id = "c8d598de-6e02-482f-bea6-c7e0b0c6ea7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e37e441-7f8e-456e-8b5d-0057b4e540d1",
                            CreatedById = "b59b00e0-d70e-499f-bfaf-dca40561fa65",
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 9, 7, 0, 44, 15, 968, DateTimeKind.Unspecified).AddTicks(7687), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "cramick.homework@cramick-it.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "CRAMICK.HOMEWORK@CRAMICK-IT.COM",
                            NormalizedUserName = "390E935F.7B61.4863.9919.43855DA11ACF",
                            PasswordHash = "AQAAAAIAAYagAAAAEJqBbnKAgYBjPFHgbAmCLbm9+wV3ezY+o1vMF9osNX47WQDNzD4SipE8oBqXNs1RVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ed522af-c133-4423-9904-b85ad07c16d8",
                            TwoFactorEnabled = false,
                            UserName = "390e935f.7b61.4863.9919.43855da11acf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b920cbd7-d17e-44b0-82c9-89c7ed51d7a8"),
                            ConcurrencyStamp = "44603441-6468-49c6-9ef4-78a2bb7e11cf",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("6e0da5cf-14f0-4f25-8785-8715f608756b"),
                            ConcurrencyStamp = "1c5fdb75-2fe8-4aca-95ab-dc2f89fcee37",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b59b00e0-d70e-499f-bfaf-dca40561fa65",
                            RoleId = new Guid("b920cbd7-d17e-44b0-82c9-89c7ed51d7a8")
                        },
                        new
                        {
                            UserId = "c8d598de-6e02-482f-bea6-c7e0b0c6ea7c",
                            RoleId = new Guid("b920cbd7-d17e-44b0-82c9-89c7ed51d7a8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CramickHomework.Application.Features.Contacts.Domain.Contact", b =>
                {
                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", "CreatedBy")
                        .WithMany("ContactsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", "UpdatedBy")
                        .WithMany("ContactsUpdated")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CramickHomework.Application.Features.Users.Domain.ApplicationUser", b =>
                {
                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", "CreatedBy")
                        .WithMany("UsersCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CramickHomework.Application.Features.Users.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CramickHomework.Application.Features.Users.Domain.ApplicationUser", b =>
                {
                    b.Navigation("ContactsCreated");

                    b.Navigation("ContactsUpdated");

                    b.Navigation("UsersCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
